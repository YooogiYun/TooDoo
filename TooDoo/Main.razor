@* MAUI Blazor Hybird *@

@inject NavigationManager NavigationManager
@inject AuthService AuthService

@inject GlobalAppState GlobalAppState


<BootstrapBlazorRoot>
    <CascadingValue Name="@AppConstants.StorageKeys.Username" Value="@_name">
        <Router AppAssembly="@typeof(Main).Assembly" AdditionalAssemblies="new[]{ typeof(HomePage).Assembly }">
            <Found Context="routeData">
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                <FocusOnNavigate RouteData="@routeData" Selector="h1" />
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p role="alert">Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingValue>
</BootstrapBlazorRoot>

@code {
    private string _name = string.Empty;

    protected async override Task OnInitializedAsync( )
    {
        #region Obsolete
        // var name = await SecureStorage.Default.GetAsync(AppConstants.StorageKeys.Username);
        // if(string.IsNullOrWhiteSpace(name))
        // {
        //     int maxTry = 3;
        //     do
        //     {
        //         name = await App.Current.MainPage.DisplayPromptAsync("Welcome" , "Please enter your name." ,
        //                                                         placeholder: AppConstants.StorageKeys.Username ,
        //                                                         maxLength: 18 ,
        //                                                         keyboard: Keyboard.Text);
        //     } while(string.IsNullOrWhiteSpace(name) && (--maxTry) > 0);

        //     if(string.IsNullOrWhiteSpace(name))
        //     {
        //         await App.Current.MainPage.DisplayAlert("Error" , "Your name is required for the coninuing using." , "Exit");
        //         App.Current.Quit();
        //         return;
        //     }
        //     // We have user name so that we can continue that.
        //     await SecureStorage.SetAsync(AppConstants.StorageKeys.Username , name);
        // }
        #endregion
        
        // await AuthService.RemoveUsername();

        var name = await AuthService.GetUserName();

        GlobalAppState.IsInitializing = false;
        if(string.IsNullOrWhiteSpace(name))
        {
            GlobalAppState.ErrorMessage = "Your name is required to use the app.";
            // App.Current.Quit();
            return;
        }
        _name = name;

        NavigationManager.NavigateTo("/home");

        await base.OnInitializedAsync();
    }
}