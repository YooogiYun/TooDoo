@* razor components *@

@page "/save"
@page "/save/{id?}"


@inject NavigationManager NavigationManager
@inject NotesService NoteService
@inject IAlertService AlertService
@inject IPlatformService PlatformService

<EditForm Model="@_note" OnValidSubmit="SaveNoteAsync">
    <DataAnnotationsValidator />

    @if(!PlatformService.IsBrower)
    {

        <div class="maui-navbar text-white">

            <NavLink href="/home" Class="text-white text-decoration-none m-0 p-0" title="Add">
                <i class="bx bx-x bx-sm">
                </i>
            </NavLink>

            <div class="">
                <h5 class="m-0">@(IsNewNode ? "Add a" : "Edit") note</h5>
            </div>
            @if(_busy)
            {
                <button type="button" class="btn btn-default text-white">
                    <span class="spinner-border spinner-border-sm"></span>
                </button>
            }
            else
            {
                <button type="submit" class="btn btn-default text-white">
                    <i class="bx bx-check bx-sm" />
                </button>
            }

        </div>
    }

    @if(_isFetching)
    {
        <Loading LoadingMessage="Fetching note..." />
    }
    else
    {
        var controlBgColor = PlatformService.IsBrower ? "bg-light" : "bg-main-accent-light-plus";

        var descriptionClassList = $"{controlBgColor} text-black form-control border-0 rounded-0 fs-5 border-bottom";
        
        var contentClassList = $"{controlBgColor} text-black form-control border-0 rounded-0 fs-5 border-bottom";
        int minHeight = PlatformService.IsBrower ? 150 : 250;
        var contentStyle = $"min-height:{minHeight}px;";


        <div class="container-fluid">
            <div class="row min-vh-100">
                <div class="col-xxl-5 col-xl-6 col-md-8 col-sm-10 @(PlatformService.IsBrower ? "mx-auto my-auto":"mt-3")">

                    <SaveNoteInner IsNewNode="IsNewNode">

                        <ChildContent>
                            <div class="mb-3">
                                <div class="form-floating">
                                    <InputText @bind-Value="_note.Title"
                                               class="text-white bg-main form-control border-0 rounded-0 fs-4"
                                               placeholder="Enter note title..." />
                                    <label class="text-main-accent">Note title...</label>
                                </div>
                                <small class="d-block text-danger">
                                    <ValidationMessage For="()=>_note.Title" />
                                </small>
                            </div>

                            <div class="mb-3">
                                <div class="form-floating">
                                    <InputText @bind-Value="_note.Description"
                                               class="@descriptionClassList"
                                               placeholder="Enter note description..." />
                                    <label>Note Description...</label>
                                </div>
                            </div>

                            <div class="mb-3">
                                <div class="form-floating">
                                    <InputText @bind-Value="_note.Content"
                                               class="@contentClassList"
                                               row="5"
                                               style="@contentStyle"
                                               placeholder="Enter note content..." />
                                    <label>Note Content...</label>
                                </div>
                                <small class="d-block text-danger">
                                    <ValidationMessage For="()=>_note.Title" />
                                </small>
                            </div>

                        </ChildContent>
                        <FooterContent>
                            @if(!PlatformService.IsBrower)
                            {
                                <div class="mb-3 d-grid">
                                    @if(_busy)
                                    {
                                        <button type="button" class="btn btn-primary bg-main disabled" disabled>
                                            <span class="spinner-border spinner-border-sm"></span>
                                            saving...
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="submit" class="btn btn-primary bg-main">Save</button>
                                    }
                                </div>

                            }
                            else
                            {
                                <div class="d-flex align-items-center justify-content-between">
                                    @if(_busy)
                                    {

                                        <NavLink href="/home" class="btn btn-default btn-sm" disabled>
                                            Cancel
                                        </NavLink>
                                        <button type="button" class="btn btn-success btn-sm" disabled>
                                            <span class="spinner-border spinner-border-sm"></span>
                                            saving...
                                        </button>

                                    }
                                    else
                                    {
                                        <NavLink href="/home" class="btn btn-default btn-sm">
                                            Cancel
                                        </NavLink>
                                        <button type="submit" class="btn btn-success btn-sm">Save</button>
                                    }
                                </div>
                            }
                        </FooterContent>
                    </SaveNoteInner>
                </div>
            </div>
        </div>
    }

</EditForm>


@code {
    [Parameter]
    public string Id { get; set; }

    public Guid NoteId => Guid.TryParse(Id , out Guid noteId) ? noteId : Guid.Empty;

    public bool IsNewNode => string.IsNullOrWhiteSpace(Id) || NoteId == Guid.Empty;

    private Note _note = new();
    private bool _busy, _isFetching;

    protected override async Task OnInitializedAsync( )
    {
        await base.OnInitializedAsync();
        if(!IsNewNode)
        {
            _isFetching = true;
            var note = await NoteService.GetNoteAsync(NoteId);
            // await Task.Delay(500);
            if(note is null)
            {
                await AlertService.AlertAsync("Invalid Note" , "No such note found.");
                NavigationManager.NavigateTo("/home" , replace: true);
                return;
            }

            _note = note;
            _isFetching = false;
        }
    }


    private async Task SaveNoteAsync( )
    {
        try
        {
            _busy = true;
            if(IsNewNode)
            {
                await NoteService.AddNoteAsync(_note);
            }
            else
            {
                await NoteService.UpdateNoteAsync(_note);
            }
            await Task.Delay(500);
            NavigationManager.NavigateTo("/home");
        }
        catch(Exception e)
        {
            await AlertService.AlertAsync("Error" , $"Error in saving note. Please try again.\nError Messsage: {e.Message}");
            // throw;
        }
        finally
        {
            _busy = false;
        }
    }
}
