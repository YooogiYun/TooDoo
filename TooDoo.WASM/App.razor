@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject AuthService AuthService

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    protected async override Task OnInitializedAsync( )
    {
        // var name = await JsRuntime.InvokeAsync<string?>("window.localStorage.getItem" , AppConstants.StorageKeys.Username);
        // if(string.IsNullOrWhiteSpace(name))
        // {
        //     int maxTry = 3;
        //     do
        //     {
        //         name = await JsRuntime.InvokeAsync<string?>("window.prompt","Welcome \nPlease enter your name.");
        //     } while(string.IsNullOrWhiteSpace(name) && (--maxTry) > 0);

        //     if(string.IsNullOrWhiteSpace(name))
        //     {
        //         await JsRuntime.InvokeVoidAsync("window.alert" , "Error \nYour name is required for the coninuing using.");
        //         return;
        //     }
        //     // We have user name so that we can continue that.
        //     await JsRuntime.InvokeVoidAsync("window.localStorage.setItem" , AppConstants.StorageKeys.Username , name);
        // }

        await AuthService.RemoveUsername();

        var name = await AuthService.GetUserName();

        if(string.IsNullOrWhiteSpace(name)) {
            JsRuntime.InvokeVoidAsync("location.reload");
            return; }

        NavigationManager.NavigateTo("/home");

        await base.OnInitializedAsync();
    }
}