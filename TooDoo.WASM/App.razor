@* WASM (WebAssembly) *@

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject AuthService AuthService

<CascadingValue Name="@AppConstants.StorageKeys.Username" Value="@_name">
    <Router AppAssembly="@typeof(App).Assembly" AdditionalAssemblies="new[]{ typeof(HomePage).Assembly }">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingValue>

@code {
    private string _name = string.Empty;

    protected async override Task OnInitializedAsync( )
    {
        #region Obsolete
        // var name = await JsRuntime.InvokeAsync<string?>("window.localStorage.getItem" , AppConstants.StorageKeys.Username);
        // if(string.IsNullOrWhiteSpace(name))
        // {
        //     int maxTry = 3;
        //     do
        //     {
        //         name = await JsRuntime.InvokeAsync<string?>("window.prompt","Welcome \nPlease enter your name.");
        //     } while(string.IsNullOrWhiteSpace(name) && (--maxTry) > 0);

        //     if(string.IsNullOrWhiteSpace(name))
        //     {
        //         await JsRuntime.InvokeVoidAsync("window.alert" , "Error \nYour name is required for the coninuing using.");
        //         return;
        //     }
        //     // We have user name so that we can continue that.
        //     await JsRuntime.InvokeVoidAsync("window.localStorage.setItem" , AppConstants.StorageKeys.Username , name);
        // }
        #endregion

        // await AuthService.RemoveUsername();

        var name = await AuthService.GetUserName();

        if(string.IsNullOrWhiteSpace(name))
        {
            await JsRuntime.InvokeVoidAsync("location.reload");
            return;
        }
        _name = name;
        NavigationManager.NavigateTo("/home");

        await base.OnInitializedAsync();
    }
}